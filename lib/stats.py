from enum import Enum
import wandb
api = wandb.Api()
wandb.login()
import numpy as np
import scipy.stats as stats
import pandas as pd
import pickle
from scipy.stats import pearsonr
from itertools import product
from wandb.apis.public import Run
from itertools import chain


ALPHA = 0.01 # as in stat tests

def diff_in_means(data1, data2):
    return np.mean(data1) - np.mean(data2)

def get_pairs(L, unique=False):
    all_ref_pairs = list(product(L, L))
    if unique:
        return list(filter(lambda x: x[0] != x[1], all_ref_pairs))
    else:
        return all_ref_pairs

# metric
class M(Enum):
    TED = "TED"
    TER = "TER"
    FER = "FER"
    ACC = "ACC"
    BCF = "BCF"
allM = [M.ACC, M.TED, M.TER, M.FER, M.BCF]
all_p2dM = [("p2d", M.ACC), ("p2d", M.TED), ("p2d", M.TER), ("p2d", M.FER), ("p2d", M.BCF)] # randomly added to identify p2d metrics

# set run_iter_too true to get unprocessed runs as well
def get_all_runs_df(run_iter_too=False):
    # note: we used two entities due to storage quota
    runs_entity1 = api.runs(
        "entity1/semisupervised_recon_exp",
        {"$and": [
            {"tags": {"$in": ["paper"]}},
            {"tags": {"$nin": ["spilled"]}},
            {"state": {"$in": ["finished"]}},
            {"config.proportion_labelled": {"$in": [0.1]}},
        ]},
    )
    print(f"Found {len(runs_entity1)} runs")
    runs_entity2 = api.runs(
        "entity2/semisupervised_recon_exp",
        {"$and": [
            {"tags": {"$in": ["paper"]}},
            {"tags": {"$nin": ["spilled"]}},
            {"state": {"$in": ["finished"]}},
            {"config.proportion_labelled": {"$in": [0.05, 0.1, 0.2, 0.3, 1.0]}},
        ]},
    )
    print(f"Found {len(runs_entity2)} runs") # expect 1216
    all_runs_df = pd.DataFrame([preproc_run_info(run) for run in chain(runs_entity1, runs_entity2)] + build_imported_runs())
    print(f'total run count {len(all_runs_df)} (probably expecting 2520)')    
    if run_iter_too:
        return all_runs_df, chain(runs_entity1, runs_entity2)
    return all_runs_df

# returns a function that can get different parts of all runs df
def mk_gt_filtered_df(all_runs_df):
    def gt_filtered_df(
        dataset: str | None = None, # 'Nromance_ipa' | 'chinese_wikihan2022'
        proportion_labelled: float | None = None, # 0.05 | 0.1 | 0.2 | 0.3 | 1.0
        group: str | None = None,
        architecture: str | None = None,
        strat_id: str | None = None,
        strat_archi_id: str | None = None,
        exclude_unlabelled: bool = False
    ):
        res = all_runs_df
        if dataset != None:
            res = res[res["dataset"] == dataset]
        if proportion_labelled != None:
            res = res[res["proportion_labelled"] == proportion_labelled]
        if group != None:
            res = res[res["group"] == group]
        if architecture != None:
            res = res[res["architecture"] == architecture]
        if strat_id != None:
            res = res[res["strat_id"] == strat_id]
        if strat_archi_id != None:
            res = res[res["strat_archi_id"] == strat_archi_id]
        if True:
            res = res[res["exclude_unlabelled"] == exclude_unlabelled]
        
        return res
    return gt_filtered_df

def gt_groups_for_porportion(p: float):
    if p == 0.1:
        return ['group1', 'group2', 'group3', 'group4']
    else: 
        return ['group1']

def preproc_run_info(run: Run):
    config = run.config
    summary = run.summary
    tags = run.tags
    if "group1" in tags:
        group = "group1"
    if "group2" in tags:
        group = "group2"
    if "group3" in tags:
        group = "group3"
    if "group4" in tags:
        group = "group4"
    
    try:
        return {
            "architecture": config["architecture"],
            "dataset": config["dataset"],
            "group": group,
            "strat_id": config["strat_id"],
            "strat_archi_id": config["strat_archi_id"],
            "proportion_labelled": config["proportion_labelled"],
            M.BCF: summary['d2p/test/bcubed_f_score'],
            M.FER: summary['d2p/test/feature_error_rate'],
            M.TER: summary['d2p/test/phoneme_error_rate'],
            M.ACC: summary['d2p/test/accuracy'],
            M.TED: summary['d2p/test/phoneme_edit_distance'],
            "wandb_id": run.id,
            "exclude_unlabelled": config['exclude_unlabelled'] if 'exclude_unlabelled' in config else False,
            ("p2d", M.BCF): summary['p2d/test/bcubed_f_score'] if 'p2d/test/bcubed_f_score' in summary else None,
            ("p2d", M.FER): summary['p2d/test/feature_error_rate'] if 'p2d/test/feature_error_rate' in summary else None,
            ("p2d", M.TER): summary['p2d/test/phoneme_error_rate'] if 'p2d/test/phoneme_error_rate' in summary else None,
            ("p2d", M.ACC): summary['p2d/test/accuracy'] if 'p2d/test/accuracy' in summary else None,
            ("p2d", M.TED): summary['p2d/test/phoneme_edit_distance'] if 'p2d/test/phoneme_edit_distance' in summary else None,
        }
    except KeyError:
        print(f"bad run: {run.id}")
        assert False

def significantly_better(ranksum_res, bootstrap_res, metric: M) -> bool:
    
    pval = ranksum_res.pvalue
    lo = bootstrap_res.confidence_interval.low
    hi = bootstrap_res.confidence_interval.high
    
    pval_sig = (pval < ALPHA)

    match metric:
        case M.ACC | M.BCF:
            ci_sig = (lo > 0.0 and hi > 0.0)
        case M.TER | M.TED | M.FER:
            ci_sig = (lo < 0.0 and hi < 0.0)
            
    return pval_sig and ci_sig, pval_sig, ci_sig

# decide if df1 performs better than df2, each df should have columns covering allM
def stat_cmp(df1, df2):# -> dict:
    results = {}
    for m in allM:
        series1 = df1[m]
        series2 = df2[m]
        
        match m:
            case M.ACC | M.BCF:
                tail = "greater"
            case M.TER | M.TED | M.FER:
                tail = "less"

        ranksum_res = stats.ranksums(series1, series2, alternative = tail)
        bootstrap_res = stats.bootstrap((series1, series2), diff_in_means, confidence_level=(1-ALPHA), random_state=0)
        
        both_sig, pval_sig, ci_sig = significantly_better(ranksum_res, bootstrap_res, m)
        if both_sig:
            assert ranksum_res.pvalue < ALPHA
            assert bootstrap_res.confidence_interval.low * bootstrap_res.confidence_interval.high > 0

        ranksum_pval = ranksum_res.pvalue
        ranksum_stat = ranksum_res.statistic
        ci_lo = bootstrap_res.confidence_interval.low
        ci_hi = bootstrap_res.confidence_interval.high

        results[m] = {
            'ranksum_pval': ranksum_pval,
            'ranksum_stat': ranksum_stat,
            'ci_lo': ci_lo,
            'ci_hi': ci_hi,
            'both_sig': both_sig, 
            'pval_sig': pval_sig,
            'ci_sig': ci_sig,
            'metric': m,
        }
            
    return results

def sig_mark(group, is_strong):
    match (group, is_strong):
        case ("group1", True):
            return "➊"
        case ("group1", False):
            return "①"
        case ("group2", True):
            return "➋"
        case ("group2", False):
            return "②"
        case ("group3", True):
            return "➌"
        case ("group3", False):
            return "③"
        case ("group4", True):
            return "➍"
        case ("group4", False):
            return "④"

# data from Kim et al. and reranked recon
baseline_100_res_imported_samples = {
    ('Nromance_ipa', 'GRU', 'Supv'): {
        M.TED: [1.00171038, 1.01254276, 0.9663626, 1.02223489, 0.9663626, 0.94925884, 0.93785633, 0.96522235, 0.96750285, 0.98346636, 0.96978335, 0.96978335, 0.98346636, 0.99030787, 0.98802737, 0.99030787, 0.9977195, 0.98745724, 0.95153934, 0.94925884], 
        M.TER: [0.12822367, 0.12967882, 0.12287184, 0.13005026, 0.12287184, 0.12088919, 0.11972517, 0.12376912, 0.12351091, 0.12529164, 0.12391789, 0.12220989, 0.12448236, 0.12540776, 0.12499572, 0.12585107, 0.12643847, 0.12562121, 0.11986592, 0.12145587], 
        M.FER: [0.04078011, 0.04093649, 0.03817214, 0.04064892, 0.03817214, 0.03674358, 0.03679261, 0.03852464, 0.03933168, 0.03962322, 0.03937674, 0.03838682, 0.03953576, 0.03902026, 0.03974116, 0.03977032, 0.03910507, 0.03951058, 0.03779446, 0.03774278], 
        M.ACC: [0.51824401, 0.51653364, 0.52394527, 0.50342075, 0.52394527, 0.51482326, 0.53192702, 0.53021665, 0.51767389, 0.51995439, 0.52394527, 0.52337514, 0.51824401, 0.51596351, 0.51425314, 0.51311288, 0.51425314, 0.51425314, 0.52736602, 0.51824401], 
        M.BCF: [0.82381446, 0.82221345, 0.82899708, 0.82021549, 0.82899708, 0.83170844, 0.83396315, 0.82988654, 0.82909667, 0.82645185, 0.82890367, 0.82895706, 0.82663753, 0.82447947, 0.82664337, 0.82649983, 0.8245638, 0.82587557, 0.83166223, 0.83042597], 
    },
    ('Nromance_ipa', 'GRU', 'GRUBS_GRU'): {
        M.ACC: [0.539908766746521, 0.5461801886558533, 0.5359178781509399, 0.5478905439376831, 0.5313568711280823, 0.543899655342102, 0.5433295369148254, 0.5421893000602722, 0.5330672860145569, 0.5507411360740662, 0.5433295369148254, 0.5404788851737976, 0.5433295369148254, 0.5364880561828613, 0.543899655342102, 0.5530216693878174, 0.5313568711280823, 0.5233751535415649, 0.526225745677948, 0.5342075228691101], 
        M.TED: [0.8905358910560608, 0.8779931664466858, 0.879133403301239, 0.8568985462188721, 0.8911060690879822, 0.8779931664466858, 0.8608893752098083, 0.8819840550422668, 0.9042189121246338, 0.866590678691864, 0.862599790096283, 0.8643101453781128, 0.8449258804321289, 0.8882554173469543, 0.8694412708282471, 0.8551881313323975, 0.9070695638656616, 0.8950968980789185, 0.8859749436378479, 0.8893956542015076], 
        M.TER: [0.09932595491409302, 0.0979269966483116, 0.0980541780591011, 0.09557420760393144, 0.09938954561948776, 0.0979269966483116, 0.09601932764053343, 0.09837212413549425, 0.10085209459066392, 0.0966552197933197, 0.09621009975671768, 0.09640086442232132, 0.09423884004354476, 0.09907159954309464, 0.09697316586971284, 0.0953834429383278, 0.10117003321647644, 0.09983466565608978, 0.09881724417209624, 0.09919878095388412], 
        M.FER: [0.034943971782922745, 0.03416343405842781, 0.03373672068119049, 0.033127132803201675, 0.03322519734501839, 0.03379768133163452, 0.032891251146793365, 0.034359563142061234, 0.03444039821624756, 0.033511437475681305, 0.031991444528102875, 0.03298003599047661, 0.032065656036138535, 0.03463122621178627, 0.03386129066348076, 0.033192068338394165, 0.03345312923192978, 0.03342662751674652, 0.03392092138528824, 0.03379502892494202], 
        M.BCF: [0.8436072468757629, 0.8446648120880127, 0.8456807136535645, 0.8493044972419739, 0.844692051410675, 0.8449727892875671, 0.8486832976341248, 0.8452276587486267, 0.8410601019859314, 0.8474346399307251, 0.8485369682312012, 0.8484594225883484, 0.8518053293228149, 0.8456616401672363, 0.8475374579429626, 0.8499388694763184, 0.8413653373718262, 0.84284508228302, 0.8440498113632202, 0.8436815738677979]
    },
    ('Nromance_ipa', 'GRU', 'GRUBS_JTRANS'): {
        M.ACC: [0.5370581746101379, 0.5478905439376831, 0.5307867527008057, 0.5416191816329956, 0.5342075228691101, 0.5507411360740662, 0.5370581746101379, 0.5410490036010742, 0.5353477597236633, 0.5518814325332642, 0.5410490036010742, 0.5393386483192444, 0.5467503070831299, 0.5353477597236633, 0.5444697737693787, 0.5461801886558533, 0.5330672860145569, 0.5250855088233948, 0.5256556272506714, 0.5250855088233948], 
        M.TED: [0.8848346471786499, 0.8734321594238281, 0.8705815076828003, 0.866590678691864, 0.8854047656059265, 0.8688711524009705, 0.8648802638053894, 0.8688711524009705, 0.9133409261703492, 0.8620296716690063, 0.8546180129051208, 0.8597491383552551, 0.8472064137458801, 0.8848346471786499, 0.8660205006599426, 0.8643101453781128, 0.8985176682472229, 0.8962371945381165, 0.8899657726287842, 0.910490334033966], 
        M.TER: [0.09869007021188736, 0.09741828590631484, 0.09710033982992172, 0.0966552197933197, 0.09875365346670152, 0.09690957516431808, 0.09646445512771606, 0.09690957516431808, 0.10186951607465744, 0.09614650905132294, 0.09531985223293304, 0.09589215368032455, 0.09449319541454317, 0.09869007021188736, 0.09659162908792496, 0.09640086442232132, 0.10021620243787766, 0.09996184706687929, 0.09926237165927888, 0.10155156999826433], 
        M.FER: [0.03378177806735039, 0.033845387399196625, 0.03361745551228523, 0.03320929408073425, 0.032566577196121216, 0.03356974571943283, 0.03259308263659477, 0.03273222595453262, 0.03447485342621803, 0.03344915434718132, 0.03183242306113243, 0.032190222293138504, 0.031848322600126266, 0.03423101827502251, 0.0333709679543972, 0.033052921295166016, 0.033266279846429825, 0.033461082726716995, 0.03352203965187073, 0.03469483554363251], 
        M.BCF: [0.844379186630249, 0.845232367515564, 0.8468089699745178, 0.8477563261985779, 0.845789909362793, 0.8465755581855774, 0.8482393026351929, 0.8469195365905762, 0.8395375609397888, 0.8483425378799438, 0.8497084975242615, 0.849174439907074, 0.8517455458641052, 0.8459824323654175, 0.847854733467102, 0.8486831784248352, 0.8429774045944214, 0.8427107930183411, 0.8436020612716675, 0.8408841490745544]
    },
    ('Nromance_ipa', 'Transformer', 'Supv'): {
        M.TED: [0.92588369, 0.89623717, 0.92531357, 0.91733181, 0.88255416, 0.87172178, 0.88939567, 0.91277081, 0.9304447, 0.88825542, 0.92417332, 0.91163056, 0.91619156, 0.88426454, 0.91448119, 0.92132269, 0.89851767, 0.89623717, 0.89281642, 0.90079818],
        M.TER: [0.11758203, 0.1142083, 0.11510594, 0.11670063, 0.11309177, 0.11153246, 0.11264503, 0.11611671, 0.11803489, 0.11289661, 0.11709279, 0.11520711, 0.11601031, 0.11270179, 0.11639737, 0.11506592, 0.11340019, 0.1142083, 0.11338583, 0.11457333],
        M.FER: [0.03958479, 0.0370603, 0.03808467, 0.03805154, 0.03707488, 0.03629964, 0.03779048, 0.03849151, 0.03865186, 0.03616182, 0.03827815, 0.03819732, 0.03731606, 0.0366866, 0.03819334, 0.03856042, 0.03786469, 0.0370603, 0.03683634, 0.03760496],
        M.ACC: [0.52337514, 0.53306727, 0.52280502, 0.51824401, 0.54275941, 0.53762828, 0.53933865, 0.53534778, 0.52451539, 0.5290764, 0.52508552, 0.5313569, 0.52337514, 0.54047891, 0.51653364, 0.52565564, 0.52622577, 0.53306727, 0.54618016, 0.5336374],
        M.BCF: [0.83837129, 0.84228126, 0.83972068, 0.84051514, 0.84458413, 0.84681252, 0.84382214, 0.84025832, 0.83848113, 0.84473944, 0.83888452, 0.8405036, 0.83976902, 0.84515266, 0.8398054, 0.83943615, 0.84281885, 0.84228126, 0.84296178, 0.84276465],
    },
    ('chinese_wikihan2022', 'GRU', 'Supv'): {
        M.ACC: [0.5556631088256836, 0.5508228540420532, 0.5653436779975891, 0.5479186773300171, 0.5721200108528137, 0.5440464615821838, 0.5575992465019226, 0.5556631088256836, 0.5421103835105896, 0.5575992465019226, 0.545014500617981, 0.562439501285553, 0.5585672855377197, 0.5692158937454224, 0.5643755793571472, 0.545014500617981, 0.54695063829422, 0.5546950697898865, 0.5643755793571472, 0.5556631088256836],
        M.TED: [0.733785092830658, 0.7405614852905273, 0.7279767394065857, 0.7376573085784912, 0.7308809161186218, 0.7444337010383606, 0.7299128770828247, 0.7405614852905273, 0.7570183873176575, 0.7299128770828247, 0.7696030735969543, 0.7279767394065857, 0.7328170537948608, 0.7086156606674194, 0.7134559750556946, 0.7483059167861938, 0.7454017400741577, 0.7366892695426941, 0.7202323079109192, 0.7444337010383606],
        M.TER: [0.17188209295272827, 0.1734693944454193, 0.170521542429924, 0.17278911173343658, 0.17120181024074554, 0.17437641322612762, 0.17097505927085876, 0.1734693944454193, 0.17732426524162292, 0.17097505927085876, 0.18027210235595703, 0.170521542429924, 0.1716553270816803, 0.16598638892173767, 0.16712018847465515, 0.17528344690799713, 0.1746031790971756, 0.1725623607635498, 0.1687074899673462, 0.17437641322612762],
        M.FER: [0.06887349486351013, 0.06995953619480133, 0.06960579752922058, 0.06867490708827972, 0.0684577003121376, 0.070002980530262, 0.06335021555423737, 0.06784951686859131, 0.07268394529819489, 0.06691862642765045, 0.07095248997211456, 0.06568985432386398, 0.06723512709140778, 0.06342468410730362, 0.06728477776050568, 0.07180890440940857, 0.069643035531044, 0.07131864130496979, 0.06576432287693024, 0.07223091274499893],
        M.BCF: [0.743134081363678, 0.7426243424415588, 0.7457192540168762, 0.7443444132804871, 0.7433823943138123, 0.7416000366210938, 0.7419592142105103, 0.7405781745910645, 0.7361567616462708, 0.7414065599441528, 0.7334730625152588, 0.7426767349243164, 0.7431371212005615, 0.7498290538787842, 0.7496216297149658, 0.7410734295845032, 0.7394739389419556, 0.7445896863937378, 0.7469332218170166, 0.7410767674446106]
    },
    ('chinese_wikihan2022', 'GRU', 'GRUBS_GRU'): {
        M.ACC: [0.5682477951049805, 0.5808325409889221, 0.5701839327812195, 0.5672797560691833, 0.5556631088256836, 0.5788964033126831, 0.5730881094932556, 0.5653436779975891, 0.5730881094932556, 0.5721200108528137, 0.579864501953125, 0.5692158937454224, 0.5711519718170166, 0.5721200108528137, 0.5682477951049805, 0.577928364276886, 0.5566311478614807, 0.575992226600647, 0.5905130505561829, 0.562439501285553], 
        M.TED: [0.7086156606674194, 0.6776379346847534, 0.6979671120643616, 0.7095837593078613, 0.7463697791099548, 0.6989351511001587, 0.6960309743881226, 0.7144240140914917, 0.7134559750556946, 0.7008712291717529, 0.6863504648208618, 0.7212004065513611, 0.7076476216316223, 0.7008712291717529, 0.7008712291717529, 0.7018393278121948, 0.7153920531272888, 0.6979671120643616, 0.6815101504325867, 0.7134559750556946], 
        M.TER: [0.16598638892173767, 0.1587301641702652, 0.16349206864833832, 0.16621315479278564, 0.17482993006706238, 0.1637188196182251, 0.16303855180740356, 0.16734693944454193, 0.16712018847465515, 0.16417233645915985, 0.160770982503891, 0.16893424093723297, 0.1657596379518509, 0.16417233645915985, 0.16417233645915985, 0.16439908742904663, 0.1675736904144287, 0.16349206864833832, 0.1596371829509735, 0.16712018847465515], 
        M.FER: [0.06498237699270248, 0.06328815221786499, 0.0641942173242569, 0.06564640998840332, 0.07028224319219589, 0.06582638621330261, 0.06531749665737152, 0.06855078786611557, 0.0672227218747139, 0.06319506466388702, 0.06444866210222244, 0.0667138323187828, 0.06743992865085602, 0.06654626876115799, 0.06428731232881546, 0.06554090976715088, 0.0662359744310379, 0.06843287497758865, 0.06508787721395493, 0.06777504831552505], 
        M.BCF: [0.7491347193717957, 0.7590287327766418, 0.7531657218933105, 0.7490871548652649, 0.7372019290924072, 0.7533915638923645, 0.756773829460144, 0.7501493692398071, 0.7504172921180725, 0.7510931491851807, 0.756176233291626, 0.7468665838241577, 0.750899612903595, 0.7520129084587097, 0.750727117061615, 0.7542386651039124, 0.7477988600730896, 0.7523422241210938, 0.7599878907203674, 0.7487360835075378]
    },
    ('chinese_wikihan2022', 'GRU', 'GRUBS_JTRANS'): {
        M.ACC: [0.5730881094932556, 0.579864501953125, 0.562439501285553, 0.5701839327812195, 0.5634075403213501, 0.5750241875648499, 0.5924491882324219, 0.5672797560691833, 0.5721200108528137, 0.5750241875648499, 0.5750241875648499, 0.5740561485290527, 0.5556631088256836, 0.5769603252410889, 0.562439501285553, 0.5788964033126831, 0.5701839327812195, 0.5740561485290527, 0.5866408348083496, 0.5672797560691833], 
        M.TED: [0.7057115435600281, 0.6805421113967896, 0.7163600921630859, 0.7066795825958252, 0.7386253476142883, 0.6960309743881226, 0.6621490716934204, 0.7212004065513611, 0.7086156606674194, 0.6969990134239197, 0.6873185038566589, 0.7047434449195862, 0.7202323079109192, 0.6960309743881226, 0.7066795825958252, 0.6911907196044922, 0.7134559750556946, 0.7105517983436584, 0.6902226805686951, 0.7047434449195862], 
        M.TER: [0.16530612111091614, 0.15941043198108673, 0.16780045628547668, 0.1655328869819641, 0.17301587760448456, 0.16303855180740356, 0.15510204434394836, 0.16893424093723297, 0.16598638892173767, 0.16326530277729034, 0.16099773347377777, 0.16507937014102936, 0.1687074899673462, 0.16303855180740356, 0.1655328869819641, 0.16190476715564728, 0.16712018847465515, 0.16643990576267242, 0.1616780012845993, 0.16507937014102936], 
        M.FER: [0.06446107476949692, 0.06496996432542801, 0.06662074476480484, 0.06625459343194962, 0.06925826519727707, 0.06544782221317291, 0.06053892523050308, 0.0687866136431694, 0.06498237699270248, 0.06413836777210236, 0.0641445741057396, 0.06642214953899384, 0.0675019845366478, 0.06426869332790375, 0.06630423665046692, 0.06438660621643066, 0.06642835587263107, 0.06910932064056396, 0.06390874832868576, 0.0675516352057457], 
        M.BCF: [0.7506755590438843, 0.7577754855155945, 0.7493370771408081, 0.7497028112411499, 0.7390393614768982, 0.7544377446174622, 0.7661447525024414, 0.7476704716682434, 0.7504696846008301, 0.7525599598884583, 0.7566051483154297, 0.7523873448371887, 0.7481231689453125, 0.7540819644927979, 0.7491270303726196, 0.7567276358604431, 0.7487212419509888, 0.748719334602356, 0.755034327507019, 0.7520758509635925]
    },
    ('chinese_wikihan2022', 'Transformer', 'Supv'): {
        M.ACC: [0.5575992465019226, 0.5430784225463867, 0.531461775302887, 0.5421103835105896, 0.5285575985908508, 0.5643755793571472, 0.5363020300865173, 0.545014500617981, 0.5556631088256836, 0.5488867163658142, 0.5566311478614807, 0.5430784225463867, 0.562439501285553, 0.5595353245735168, 0.5333978533744812, 0.5198451280593872, 0.5440464615821838, 0.545014500617981, 0.5643755793571472, 0.5430784225463867],
        M.TED: [0.718296229839325, 0.7444337010383606, 0.7754114270210266, 0.749273955821991, 0.7792836427688599, 0.731848955154419, 0.75121009349823, 0.749273955821991, 0.733785092830658, 0.7424975633621216, 0.7231364846229553, 0.7386253476142883, 0.7202323079109192, 0.7289448380470276, 0.7570183873176575, 0.7705711722373962, 0.749273955821991, 0.7434656620025635, 0.7463697791099548, 0.7531461715698242],
        M.TER: [0.16825397312641144, 0.17437641322612762, 0.1816326528787613, 0.1755101978778839, 0.1825396865606308, 0.17142857611179352, 0.17596371471881866, 0.1755101978778839, 0.17188209295272827, 0.17392289638519287, 0.16938775777816772, 0.17301587760448456, 0.1687074899673462, 0.1707482933998108, 0.17732426524162292, 0.180498868227005, 0.1755101978778839, 0.17414966225624084, 0.17482993006706238, 0.17641723155975342],
        M.FER: [0.06706136465072632, 0.070859394967556, 0.07549523562192917, 0.0707601010799408, 0.07418578118085861, 0.06667659431695938, 0.07144275307655334, 0.0689665898680687, 0.0698726549744606, 0.06685657054185867, 0.07031948119401932, 0.07224953174591064, 0.06817843019962311, 0.06815981864929199, 0.07006503641605377, 0.07385686784982681, 0.0663166493177414, 0.06390254199504852, 0.06705515831708908, 0.07028844952583313],
        M.BCF: [0.7493835687637329, 0.7387365698814392, 0.7335715889930725, 0.7381035685539246, 0.7323150038719177, 0.7405853271484375, 0.7376258969306946, 0.7378836870193481, 0.7447287440299988, 0.7401782274246216, 0.7483571171760559, 0.7397294640541077, 0.7457425594329834, 0.7434858679771423, 0.7349035143852234, 0.7312034368515015, 0.7373124957084656, 0.7364972233772278, 0.7377455830574036, 0.73740154504776]
    },
}

def build_imported_runs():
    runs = []
    for (d, a, s) in baseline_100_res_imported_samples.keys():
        for i in range(20):
            runs.append({
                "architecture": a,
                "dataset": d,
                "group": 'group1',
                "strat_id": s,
                "strat_archi_id": f"{a.replace('Transformer', 'Trans')}{s}",
                "proportion_labelled": 1.0,
                M.BCF: baseline_100_res_imported_samples[(d, a, s)][M.BCF][i],
                M.FER: baseline_100_res_imported_samples[(d, a, s)][M.FER][i],
                M.TER: baseline_100_res_imported_samples[(d, a, s)][M.TER][i],
                M.ACC: baseline_100_res_imported_samples[(d, a, s)][M.ACC][i],
                M.TED: baseline_100_res_imported_samples[(d, a, s)][M.TED][i],
                "wandb_id": '_dummy',
                "exclude_unlabelled": True,
            })
        
    return runs